name: WinConveyoR

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'

permissions:
  contents: write
  discussions: write

env:
  BINARIES_POSIX: "./cli/dist/wcr ./lib/libwconr/Release/libwconr.so"
  BINARIES_NT: "'./cli/dist/wcr.exe', './lib/libwconr/Release/libwconr.dll'"

jobs:
  check_build:
    if: ${{ github.event_name == 'push' && github.ref_name != 'main' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y gcc libc6-dev cmake python3 python3-pip
          pip3 install pyinstaller

      - name: Build with CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rm -rf build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Verify binaries (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          for binary in $(echo "${{ env.BINARIES_POSIX }}" | tr ' ' '\n'); do
            if [ ! -f "$binary" ]; then
              echo "Binary $binary doesn't exist."
              exit 1
            fi
          done

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install gcc cmake python3 pyinstaller zip
          export PATH="/opt/homebrew/opt/cmake/bin:$PATH"

      - name: Build with CMake (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          rm -rf build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Verify binaries (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          for binary in $(echo "${{ env.BINARIES_POSIX }}" | tr ' ' '\n'); do
            if [ ! -f "$binary" ]; then
              echo "Binary $binary doesn't exist."
              exit 1
            fi
          done

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake -y
          choco install make -y
          pip install pyinstaller

      - name: Build with CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if exist build rmdir /S /Q build
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Verify binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          for %%f in ($Env:BINARIES_NT) do (
            if not exist %%f (
              echo Binary %%f doesn't exist.
              exit 1
            )
          )

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: false

  build_release:
    name: Build Release
    needs: create_release
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            release_suffix: ubuntu
          - os: macos-latest
            release_suffix: mac
          - os: windows-latest
            release_suffix: windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python (if needed)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies (Linux - release)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y gcc libc6-dev cmake python3 python3-pip zip
          pip3 install pyinstaller

      - name: Build with CMake (Linux - release)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rm -rf build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Package Linux Release
        if: matrix.os == 'ubuntu-latest'
        run: |
          zip -j release_ubuntu.zip ${{ env.BINARIES_POSIX }}

      - name: Install dependencies (macOS - release)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install gcc cmake python3 pyinstaller zip
          export PATH="/opt/homebrew/opt/cmake/bin:$PATH"

      - name: Build with CMake (macOS - release)
        if: matrix.os == 'macos-latest'
        run: |
          rm -rf build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Package Mac Release
        if: matrix.os == 'macos-latest'
        run: |
          zip -j release_mac.zip ${{ env.BINARIES_POSIX }}

      - name: Install dependencies (Windows - release)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake -y
          choco install make -y
          pip install pyinstaller

      - name: Build with CMake (Windows - release)
        if: matrix.os == 'windows-latest'
        run: |
          if exist build rmdir /S /Q build
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Package Windows Release
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path $Env:BINARIES_NT -DestinationPath release_windows.zip

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ${{ matrix.os == 'ubuntu-latest' && 'release_ubuntu.zip' || '' }}
            ${{ matrix.os == 'macos-latest' && 'release_mac.zip' || '' }}
            ${{ matrix.os == 'windows-latest' && 'release_windows.zip' || '' }}
